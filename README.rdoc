= dci-ruby

Trygve Reenskaug, the parent of MVC, proposes an evolution to traditional OO paradigm. (http://www.artima.com/articles/dci_vision.html).
This gem makes Data-Context-Interaction paradigm ready to be used in your Ruby application.

## Installation

Install as usual, either with rubygems or including it in your Gemfile and running bundle install:
    gem install dci-ruby
or
    # Gemfile
    gem "dci-ruby"


## Use

dci-ruby gives you the class Context to inherit from to create your own contexts:

    class MoneyTransfer < Context

      # Roles
          role :source_account do
            def transfer(amount)
               balance -= amount
               target_account.get_transfer(amount)
            end
          end

          role :target_account do
            def get_transfer(amount)
              balance += amount
            end
          end

      # Interactions
          def run(amount)
            source_account.transfer(amount)
          end
    end

Every context defines some roles to be played by external objects (players) and their interactions. This way
you have the whole agents and operations in a user case wrapped in just one entity instead of spreaded througout the
whole application code.

Use the defined contexts in your application, instantiating them wherever you need them in your code:

    MoneyTransfer.new(:source_account => Account.new(1),
                      :target_account => Account.new(2)).run(100)

Role player objects (the two account instances above) respond to their corresponding role methods inside the context.
Moreover, every role player has access to the rest of role players. That's why target_account is reachable inside source_account#transfer
rolemethod.


== Copyright

Copyright (c) 2012 Lorenzo Tello. See LICENSE.txt for
further details.

